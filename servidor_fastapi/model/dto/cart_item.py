# coding: utf-8

"""
    Music E-Commerce API

    API para gestionar usuarios (no logeados, logueados, artista), productos y compras.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr, StrictFloat
from typing import Any, ClassVar, Dict, Optional, Union

class CartItem(BaseModel):
    """
    DTO para un ítem en el carrito.
    Incluye los mismos atributos que Product y añade el campo 'cantidad'
    """
    id: Optional[StrictStr] = Field(default=None, description="Identificador único del producto (ID) del carrito")
    nombre: StrictStr = Field(..., description="Nombre del producto")
    imagen: StrictStr = Field(..., description="URL/path de la imagen del producto")
    precio: Union[StrictFloat, StrictInt] = Field(..., description="Precio del producto")
    fecha: StrictStr = Field(..., description="Fecha asociada al producto (YYYY-MM-DD)")
    tipo: StrictStr = Field(..., description="Categoría del producto (vinilos, cds, cassettes, camisetas)")
    estilo: StrictStr = Field(..., description="Estilo o descripción del producto")
    autor: StrictStr = Field(..., description="ID del artista que subió el producto")
    cantidad: StrictInt = Field(..., ge=1, description="Cantidad del producto en el carrito (mínimo 1)")
    
    __properties: ClassVar[list[str]] = ["id", "nombre", "imagen", "precio", "fecha", "tipo", "estilo", "autor", "cantidad"]

    def to_str(self) -> str:
        """Devuelve la representación en cadena del modelo."""
        return pprint.pformat(self.model_dump())
    
    def to_json(self) -> str:
        """Devuelve la representación JSON del modelo."""
        return json.dumps(self.to_dict())
    
    @classmethod
    def from_json(cls, json_str: str) -> CartItem:
        """Crea una instancia de CartItem a partir de un string JSON."""
        return cls.from_dict(json.loads(json_str))
    
    def to_dict(self) -> Dict[str, Any]:
        """Devuelve el diccionario del modelo."""
        return self.model_dump(exclude_none=True)
    
    @classmethod
    def from_dict(cls, obj: Dict) -> CartItem:
        """Crea una instancia de CartItem a partir de un diccionario."""
        if not isinstance(obj, dict):
            return cls.model_validate(obj)
        return cls.model_validate(obj)


